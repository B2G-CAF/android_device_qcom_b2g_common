#
# Makefile to hook into Android.mk for building XPCOM components, IDLs
# and typelibs, along with installing into Gecko
#

# Global note: If any of the make rule commands include references to
# $(LOCAL...) variables, they have to be saved in target private variables
# otherwise they will have whatever value they happen to have when the
# target is executed, which is not what we want.
# The reason is that rules don't execute in the first pass through
# the makefile, and by the time they execute, any variable references
# in the rule are essentially environment variables, with whatever
# value they were last assigned to (not necessarily what the source
# makefile assigned  to them in the first pass)
#
# For example
# $(LOCAL_XPCOM_MODULE)-somerule:
# 	@mkdir $(LOCAL_XPCOM_MODULE)_objdir
# is incorrect. Replace with:
# $(LOCAL_XPCOM_MODULE)-somerule: PRIVATE_XPCOM_MODULE := $(LOCAL_XPCOM_MODULE)
# $(LOCAL_XPCOM_MODULE)-somerule:
# 	@mkdir $(PRIVATE_XPCOM_MODULE)_objdir

# Setting up module name and directories
# Name of module
LOCAL_XPCOM_MODULE := $(LOCAL_MODULE)

# Home directory of the module source
LOCAL_XPIDL_PATH := $(LOCAL_PATH)
# The directory where this component's intermediates will be put by Android build system
LOCAL_XPCOM_MODULE_OBJDIR := $(TARGET_OUT_INTERMEDIATES)/SHARED_LIBRARIES/$(LOCAL_XPCOM_MODULE)_intermediates
# The directory where all the objs generated by idl compilation will go
LOCAL_XPIDL_OUT := $(LOCAL_XPCOM_MODULE_OBJDIR)/xpidl_obj

# Add Gecko as a dependency of this module.
LOCAL_REQUIRED_MODULES := $(LOCAL_REQUIRED_MODULES) gecko
# Add Gecko headers to include path
LOCAL_C_INCLUDES := $(LOCAL_C_INCLUDES) $(ANDROID_PRODUCT_OUT)/obj/objdir-gecko/dist/include $(LOCAL_XPIDL_OUT)

# Compiler flags required by many Gecko libraries/sources
LOCAL_CPPFLAGS := $(LOCAL_CPPFLAGS) -std=c++0x
LOCAL_CFLAGS := $(LOCAL_CFLAGS) -D__STDC_INT64__ -D__STDC_LIMIT_MACROS -Wno-ignored-qualifiers

# Gecko locations
GECKO_DIR := $(ANDROID_BUILD_TOP)/gecko
GECKO_OBJDIR := $(ANDROID_PRODUCT_OUT)/obj/objdir-gecko
LIBXUL_DIST := $(GECKO_OBJDIR)/dist

# Flags to be used by idl compilation
LOCAL_XPIDL_FLAGS := -I$(LOCAL_XPIDL_PATH) -I$(LIBXUL_DIST)/idl

# Although we added Gecko as a dependency, that only prevents the link step
# from happening until Gecko is built. But the IDL generators and other
# headers have no make dependency on Gecko and will fall over in
# parallel make. Add the define below as a pre-req to every Gecko file and path
# that we depend on
DEPENDS_ON_GECKO := $(TARGET_OUT)/b2g/distribution

ifeq ($(ONE_SHOT_MAKEFILE),)
$(TARGET_OUT)/b2g/distribution: $(TARGET_OUT)/gecko
endif

$(LOCAL_XPCOM_MODULE)-xpidl_prereqs: PRIVATE_XPIDL_OUT := $(LOCAL_XPIDL_OUT)

$(LOCAL_XPCOM_MODULE)-xpidl_prereqs:
	@mkdir -p $(PRIVATE_XPIDL_OUT)

XPIDL_DEPS := $(LIBXUL_DIST)/sdk/bin/header.py \
              $(LIBXUL_DIST)/sdk/bin/typelib.py \
              $(LIBXUL_DIST)/sdk/bin/xpidl.py \


$(LIBXUL_DIST)/sdk/bin/header.py: $(DEPENDS_ON_GECKO)
$(LIBXUL_DIST)/sdk/bin/typelib.py: $(DEPENDS_ON_GECKO)
$(LIBXUL_DIST)/sdk/bin/xpidl.py: $(DEPENDS_ON_GECKO)

PLY_INCLUDE := -I$(GECKO_DIR)/other-licenses/ply

# When used within make target rule, prints out the
# filename of the first dependency
REPORT_BUILD = @echo $(notdir $<)

# When used within make target rule, expands the first pre-requisite
# to its absolute path.
CURRENT_IDLS = $(abspath $<)

PYTHON := python
PYTHON_PATH := $(PYTHON) $(GECKO_DIR)/config/pythonpath.py
XPIDL_LINK := $(PYTHON) $(LIBXUL_DIST)/sdk/bin/xpt.py link

INSTALL := install
INSTALL_FLAGS := -m 644

# Make gecko library dependencies work with Android.mk rule
# Copy them to where Android build system expects to find them
$(foreach lib,$(LOCAL_XPCOM_STATIC_LIBRARIES), $(eval NOTICE-TARGET-STATIC_LIBRARIES-$(lib):))


#
# Copy LOCAL_XPCOM_STATIC_LIBRARIES and LOCAL_XPCOM_SHARED_LIBRARIES from $(GECKO_OBJDIR)/dist
# to the standard build out locations
#

___LIBS:=$(foreach lib,$(LOCAL_XPCOM_STATIC_LIBRARIES),\
  $(TARGET_OUT_INTERMEDIATES)/lib/$(lib).a $(TARGET_OUT_INTERMEDIATES)/STATIC_LIBRARIES/$(lib)_intermediates/$(lib).a)

$(foreach lib,$(LOCAL_XPCOM_STATIC_LIBRARIES),\
  $(eval $(GECKO_OBJDIR)/dist/lib/$(lib).a: $(DEPENDS_ON_GECKO)))

$(foreach lib,$(___LIBS),\
  $(eval $(lib): $(GECKO_OBJDIR)/dist/lib/$(notdir $(lib) ; mkdir -p $$(@D) && cp $$< $$@)))

LOCAL_STATIC_LIBRARIES := $(LOCAL_STATIC_LIBRARIES) $(LOCAL_XPCOM_STATIC_LIBRARIES)


___LIBS:=$(foreach lib,$(LOCAL_XPCOM_SHARED_LIBRARIES),\
  $(TARGET_OUT_INTERMEDIATES)/lib/$(lib).so $(TARGET_OUT_INTERMEDIATES)/SHARED_LIBRARIES/$(lib)_intermediates/$(lib).so)

$(foreach lib,$(LOCAL_XPCOM_SHARED_LIBRARIES),\
  $(eval $(GECKO_OBJDIR)/dist/lib/$(lib).so: $(DEPENDS_ON_GECKO)))

$(foreach lib,$(___LIBS),\
  $(eval $(lib): $(GECKO_OBJDIR)/dist/lib/$(notdir $(lib) ; mkdir -p $$(@D) && cp $$< $$@)))

LOCAL_SHARED_LIBRARIES := $(LOCAL_SHARED_LIBRARIES) $(LOCAL_XPCOM_SHARED_LIBRARIES)


# Make the module being built by Android.mk depend on the following:
# 1. The .h corresponding to the .idls found in the directory
# 2. The corresponding .xpt files
# 3. The overall module .xpt file
# 4. The export rules to copy idls and headers to $(LIBXUL_DIST)

# Dependencies for IDL files
ifneq (,$(strip $(LOCAL_XPCOM_IDLS)))
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_ADDITIONAL_DEPENDENCIES) $(patsubst %.idl,$(LOCAL_XPIDL_OUT)/%.h,$(LOCAL_XPCOM_IDLS))
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_ADDITIONAL_DEPENDENCIES) $(patsubst %.idl,$(LOCAL_XPIDL_OUT)/%.xpt,$(LOCAL_XPCOM_IDLS))
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_ADDITIONAL_DEPENDENCIES) $(LOCAL_XPIDL_OUT)/$(LOCAL_XPCOM_MODULE).xpt
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_ADDITIONAL_DEPENDENCIES) $(LOCAL_XPCOM_MODULE)-export_headers $(LOCAL_XPCOM_MODULE)-export_idls
endif

LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_ADDITIONAL_DEPENDENCIES) $(LOCAL_XPCOM_MODULE)-xpcom_install

LOCAL_XPCOM_INSTALL_DIR := $(TARGET_OUT)/b2g/distribution/bundles/$(LOCAL_XPCOM_MODULE)

$(LOCAL_XPCOM_MODULE)-xpidl_install_prereqs: PRIVATE_XPCOM_INSTALL_DIR := $(LOCAL_XPCOM_INSTALL_DIR)
$(LOCAL_XPCOM_MODULE)-xpidl_install_prereqs: $(DEPENDS_ON_GECKO)
	@mkdir -p $(PRIVATE_XPCOM_INSTALL_DIR)

$(LOCAL_XPIDL_OUT)/%.h: $(LOCAL_XPIDL_PATH)/%.idl $(XPIDL_DEPS) $(LOCAL_XPCOM_MODULE)-xpidl_prereqs
	$(REPORT_BUILD)
	$(PYTHON_PATH) $(PLY_INCLUDE) $(LIBXUL_DIST)/sdk/bin/header.py $(LOCAL_XPIDL_FLAGS) $(CURRENT_IDLS) -o $@

# generate intermediate .xpt files into $(LOCAL_XPIDL_OUT), then link
# into $(LOCAL_XPCOM_MODULE).xpt and export it to $(LOCAL_XPCOM_INSTALL_DIR)
$(LOCAL_XPIDL_OUT)/%.xpt: $(LOCAL_XPIDL_PATH)/%.idl $(XPIDL_DEPS) $(LOCAL_XPCOM_MODULE)-xpidl_prereqs
	$(REPORT_BUILD)
	$(PYTHON_PATH) $(PLY_INCLUDE) -I$(GECKO_DIR)/xpcom/typelib/xpt/tools $(LIBXUL_DIST)/sdk/bin/typelib.py $(LOCAL_XPIDL_FLAGS) $(CURRENT_IDLS) -o $@

$(LOCAL_XPIDL_OUT)/$(LOCAL_XPCOM_MODULE).xpt: PRIVATE_XPCOM_INSTALL_DIR := $(LOCAL_XPCOM_INSTALL_DIR)
$(LOCAL_XPIDL_OUT)/$(LOCAL_XPCOM_MODULE).xpt: $(patsubst %.idl,$(LOCAL_XPIDL_OUT)/%.xpt,$(LOCAL_XPCOM_IDLS)) $(LOCAL_XPCOM_MODULE)-xpidl_install_prereqs
	$(XPIDL_LINK) $@ $(filter-out %-xpidl_install_prereqs, $^)
	$(INSTALL) $(INSTALL_FLAGS) $@ $(PRIVATE_XPCOM_INSTALL_DIR)

LOCAL_JS_SRC_FILES := $(filter %.js,$(LOCAL_SRC_FILES))
LOCAL_SRC_FILES := $(filter-out %.js,$(LOCAL_SRC_FILES))

# Invoke Android build system to build the shared library
include $(BUILD_SHARED_LIBRARY)

# Install the .so only if its not a pure JS component
ifneq (,$(strip $(LOCAL_SRC_FILES)))
$(LOCAL_INSTALLED_MODULE): $(LOCAL_XPCOM_INSTALL_DIR)/$(LOCAL_XPCOM_MODULE).so
$(LOCAL_XPCOM_INSTALL_DIR)/$(LOCAL_XPCOM_MODULE).so : \
  $(LOCAL_XPCOM_MODULE_OBJDIR)/LINKED/$(LOCAL_XPCOM_MODULE).so | $(TARGET_STRIP)
	$(transform-to-stripped)

# Override the install rule supplied by BUILD_SHARED_LIBRARY
# TODO: This could be done in a cleaner fashion...
$(LOCAL_INSTALLED_MODULE):
	$(hide) true
endif

$(LOCAL_XPCOM_MODULE)-export_idls: PRIVATE_XPCOM_INSTALL_DIR := $(LIBXUL_DIST)/idl
$(LOCAL_XPCOM_MODULE)-export_idls: $(patsubst %.idl,$(LOCAL_XPIDL_PATH)/%.idl,$(LOCAL_XPCOM_IDLS)) $(LOCAL_XPCOM_MODULE)-xpidl_install_prereqs
	$(INSTALL) $(INSTALL_FLAGS) $(filter-out %-xpidl_install_prereqs, $^) $(PRIVATE_XPCOM_INSTALL_DIR)

$(LIBXUL_DIST)/idl: $(DEPENDS_ON_GECKO)

$(LOCAL_XPCOM_MODULE)-export_headers: PRIVATE_XPCOM_INSTALL_DIR := $(LIBXUL_DIST)/include
$(LOCAL_XPCOM_MODULE)-export_headers: $(patsubst %.idl,$(LOCAL_XPIDL_OUT)/%.h,$(LOCAL_XPCOM_IDLS)) $(LOCAL_XPCOM_MODULE)-xpidl_install_prereqs
	$(INSTALL) $(INSTALL_FLAGS) $(filter-out %-xpidl_install_prereqs, $^) $(PRIVATE_XPCOM_INSTALL_DIR)

$(LIBXUL_DIST)/include: $(DEPENDS_ON_GECKO)

$(LOCAL_XPCOM_MODULE)-install_js_srcs:

ifneq (,$(strip $(LOCAL_JS_SRC_FILES)))
JSMIN := $(BUILD_OUT_EXECUTABLES)/jsmin$(BUILD_EXECUTABLE_SUFFIX)

$(LOCAL_XPCOM_MODULE)-install_js_srcs: PRIVATE_JS_SRC_FILES := $(LOCAL_JS_SRC_FILES)
$(LOCAL_XPCOM_MODULE)-install_js_srcs: PRIVATE_XPIDL_PATH := $(LOCAL_XPIDL_PATH)
$(LOCAL_XPCOM_MODULE)-install_js_srcs: PRIVATE_XPCOM_INSTALL_DIR := $(LOCAL_XPCOM_INSTALL_DIR)
ifdef USE_JSMIN
$(LOCAL_XPCOM_MODULE)-install_js_srcs: PRIVATE_JS_NOTICE := $(LOCAL_JS_NOTICE)
$(LOCAL_XPCOM_MODULE)-install_js_srcs: $(LOCAL_XPCOM_MODULE)-xpidl_install_prereqs $(JSMIN)
	$(foreach js,$(PRIVATE_JS_SRC_FILES),$(JSMIN) < $(PRIVATE_XPIDL_PATH)/$(js) > $(PRIVATE_XPCOM_INSTALL_DIR)/$(notdir $(js)) '$(PRIVATE_JS_NOTICE)' && ) true
else
$(LOCAL_XPCOM_MODULE)-install_js_srcs: $(LOCAL_XPCOM_MODULE)-xpidl_install_prereqs $(ACP)
	$(foreach js,$(PRIVATE_JS_SRC_FILES),$(ACP) $(PRIVATE_XPIDL_PATH)/$(js) $(PRIVATE_XPCOM_INSTALL_DIR) && ) true
endif

endif

$(LOCAL_XPCOM_MODULE)-xpcom_install: PRIVATE_XPIDL_PATH := $(LOCAL_XPIDL_PATH)
$(LOCAL_XPCOM_MODULE)-xpcom_install: PRIVATE_XPCOM_INSTALL_DIR := $(LOCAL_XPCOM_INSTALL_DIR)
$(LOCAL_XPCOM_MODULE)-xpcom_install: PRIVATE_XPCOM_MODULE := $(LOCAL_XPCOM_MODULE)
$(LOCAL_XPCOM_MODULE)-xpcom_install: $(LOCAL_XPCOM_MODULE)-xpidl_install_prereqs $(LOCAL_XPCOM_MODULE)-install_js_srcs $(GECKO_DIR)/config/buildlist.py $(LOCAL_XPIDL_PATH)/chrome.manifest
	@cp $(PRIVATE_XPIDL_PATH)/chrome.manifest $(PRIVATE_XPCOM_INSTALL_DIR)
ifneq (,$(strip $(LOCAL_XPCOM_IDLS)))
	$(PYTHON) $(GECKO_DIR)/config/buildlist.py $(PRIVATE_XPCOM_INSTALL_DIR)/interfaces.manifest "interfaces $(PRIVATE_XPCOM_MODULE).xpt"
	$(PYTHON) $(GECKO_DIR)/config/buildlist.py $(PRIVATE_XPCOM_INSTALL_DIR)/chrome.manifest "manifest interfaces.manifest"
endif

$(GECKO_DIR)/config/buildlist.py: $(DEPENDS_ON_GECKO)
